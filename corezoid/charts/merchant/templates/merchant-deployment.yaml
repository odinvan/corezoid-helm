apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}-deployment
  labels:
    app: {{ .Values.global.product }}
    tier: {{ .Values.appName }}
spec:
  selector:
    matchLabels:
      tier: {{ .Values.appName }}
  strategy:
    type: RollingUpdate
  replicas: {{ .Values.global.merchant.minReplicas }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/merchant-application-properties-configmap.yaml") . | sha256sum }}
        checksum/config: {{ include (print $.Template.BasePath "/merchant-callback-properties-configmap.yaml") . | sha256sum }}
        checksum/config: {{ include (print $.Template.BasePath "/merchant-datasource-configmap.yaml") . | sha256sum }}
        checksum/config: {{ include (print $.Template.BasePath "/merchant-log4j2-spring-configmap.yaml") . | sha256sum }}
        prometheus.io/path: /metrics
        prometheus.io/port: "9100"
        prometheus.io/scrape: "true"
      labels:
        app: {{ .Values.global.product }}
        tier: {{ .Values.appName }}
    spec:
      terminationGracePeriodSeconds: 40
      initContainers:
        - name: init-wait
          image: docker-hub.middleware.biz/public/alpine
          command: ["sh", "-c", "apk add postgresql-client; until PGPASSWORD=${POSTGRES_DBPWD} psql -h ${POSTGRES_DBHOST} -U ${POSTGRES_DBUSER} -d merchant -c \"select 1\" > /dev/null 2>&1 ; do echo Waiting while postgres created settings db ...; sleep 3; done"]
          env:
            - name: POSTGRES_DBHOST
              {{- if .Values.global.db.bouncer }}
              value: "pgbouncer-service"
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: dbhost
            {{- end }}
            - name: POSTGRES_DBPORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: dbport
            - name: POSTGRES_DBUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: dbuser
            - name: POSTGRES_DBPWD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: dbpwd
      containers:
        - name: {{ .Values.appName }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy | default "IfNotPresent" }}
          image: "{{ .Values.image.registry }}/{{ .Values.global.repotype | default "public" }}{{ .Values.image.repository }}:{{ .Values.global.merchant.tag }}"
          env:
          {{- if .Values.global.http_proxy }}
          - name: http_proxy
            value: {{ .Values.global.http_proxy }}
          {{- end }}
          - name: MERCHANT_LOGIN
            valueFrom:
              secretKeyRef:
                name: merchant-secret
                key: merchant_login
          - name: MERCHANT_SECRET
            valueFrom:
              secretKeyRef:
                name: merchant-secret
                key: merchant_secret
          - name: SPRING_REDIS_HOST
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.redis.secret.name }}
                key: host
          - name: SPRING_REDIS_PORT
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.redis.secret.name }}
                key: port
          - name: SPRING_DATASOURCE_URL
            {{- if .Values.global.db.bouncer }}
            value: "pgbouncer-service"
            {{- else }}
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.db.secret.name }}
                key: dbhost
            {{- end }}
          - name: POSTGRES_DBPORT
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.db.secret.name }}
                key: dbport
          - name: SPRING_DATASOURCE_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.db.secret.name }}
                key: dbuser
          - name: SPRING_DATASOURCE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.db.secret.name }}
                key: dbpwd
          ports:
          - containerPort: {{ .Values.containers.containerPort }}
          - containerPort: 7980
          volumeMounts:
            - name: {{ .Values.appName }}config
              mountPath: /ebsmnt/conf/application.properties
              subPath: application.properties
            - name: {{ .Values.appName }}callback-properties
              mountPath: /ebsmnt/conf/callback.properties
              subPath: callback.properties
            - name: {{ .Values.appName }}datasource
              mountPath: /ebsmnt/conf/data.sql
              subPath: data.sql
            - name: {{ .Values.appName }}log4j2-spring
              mountPath: /ebsmnt/conf/log4j2-spring.xml
              subPath: log4j2-spring.xml
          resources:
            {{ .Values.global.merchant.resources | toYaml | indent 12 | trim }}
      {{- if not  (eq .Values.global.repotype "public") }}
      imagePullSecrets:
        - name: corezoid-secret
      {{- end }}
      volumes:
        - name: {{ .Values.appName }}config
          configMap:
            name: {{ .Values.appName }}-config
        - name: {{ .Values.appName }}callback-properties
          configMap:
            name: {{ .Values.appName }}-callback-properties
        - name: {{ .Values.appName }}datasource
          configMap:
            name: {{ .Values.appName }}-datasource
        - name: {{ .Values.appName }}log4j2-spring
          configMap:
            name: {{ .Values.appName }}-log4j2-spring
