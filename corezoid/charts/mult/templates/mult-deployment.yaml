apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}-deployment
  labels:
    app: {{ .Values.global.product }}
    tier: {{ .Values.appName }}
spec:
  selector:
    matchLabels:
      tier: {{ .Values.appName }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  replicas: {{ .Values.global.mult.minReplicas }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/mult-configmap.yaml") . | sha256sum }}
        prometheus.io/path: /metrics
        prometheus.io/port: "9100"
        prometheus.io/scrape: "true"
      labels:
        app: {{ .Values.global.product }}
        tier: {{ .Values.appName }}
    spec:
      terminationGracePeriodSeconds: 300
      securityContext:
        fsGroup: 1000
      initContainers:
        - name: init-wait
          image: "{{ .Values.global.imageRegistry }}/public/alpine"
          command: ["sh", "-c", "until  {{- if .Values.global.mq.internal }} nc -zvw1 rabbit-service 5672 {{- else }}  nc -zvw1  ${MQ_HOST} ${MQ_PORT} {{- end }}; do echo waiting for deps; sleep 2; done;"]
          env:
            - name: MQ_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: host
            - name: MQ_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: port
        - name: init-wait-rmq
          image: "{{ .Values.global.imageRegistry }}/public/alpine"
          command: ['sh']
          args:
            - "-c"
            - |
              until wget -O - -q --header "Authorization: Basic `echo -n \"$MQ_USERNAME:$MQ_PASSWORD\" | base64`" http://{{- if .Values.global.mq.internal }}rabbit-service{{- else }}${MQ_HOST}{{- end }}:15672/api/exchanges/%2Fconveyor/ | grep -qF "conf_agent_direct"; do echo "waiting for exchanges to be ready..."; sleep 2; done
          env:
            - name: MQ_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: host
            - name: MQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: username
            - name: MQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: password
      shareProcessNamespace: true
      containers:
        - name: {{ .Values.appName }}
          image: "{{ .Values.global.imageRegistry }}/{{.Values.global.repotype}}{{ .Values.image.repository }}:{{ .Values.global.mult.tag }}"
          imagePullPolicy: {{ .Values.global.imagePullPolicy | default "IfNotPresent" }}
          env:
            - name: NODE_COOKIE
              value: {{ .Values.appName }}-{{ .Release.Namespace }}
            - name: RELX_REPLACE_OS_VARS
              value: "true"
            - name: IPNODEDOMAIN
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            {{- if .Values.global.debug }}
            - name: ERL_CRASH_DUMP
              value: "/dev/stderr"
            {{- end }}
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.redis.secret.name }}
                  key: host
            - name: REDIS_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.redis.secret.name }}
                  key: port
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.redis.secret.name }}
                  key: password
            - name: MQ_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: host
            - name: MQ_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: port
            - name: MQ_VHOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: vhost
            - name: MQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: username
            - name: MQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: password
          ports:
          - containerPort: 9082
          lifecycle:
            preStop:
              exec:
                command: ["/ebsmnt/erlang/conveyor_api_multipart/bin/conveyor_api_multipart","stop"]
          volumeMounts:
            - name: {{ .Values.appName }}-config
              mountPath: /ebsmnt/conf/conveyor_api_multipart.config
              subPath: conveyor_api_multipart.config
            - name: {{ .Values.appName }}-claim
              mountPath: /ebsmnt_share
          resources:
            {{ .Values.global.mult.resources | toYaml | indent 12 | trim }}
          livenessProbe:
            exec:
              command:
              - bash
              - -ec
              - |
                ulimit -n 1024
                exec /usr/bin/conveyor_api_multipart liveness
            initialDelaySeconds: 20
            periodSeconds: 20
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
              - bash
              - -ec
              - |
                ulimit -n 1024
                exec /usr/bin/conveyor_api_multipart readiness
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
              add: ["IPC_LOCK"]
      {{- if not  (eq .Values.global.repotype "public") }}
      imagePullSecrets:
        - name: corezoid-secret
      {{- end }}
      {{- if (.Values.global.tolerations) }}
      tolerations:
{{ toYaml .Values.global.tolerations | indent 8 }}
      {{- end }}
      volumes:
        - name: {{ .Values.appName }}-config
          configMap:
            name: {{ .Values.appName }}-config
        - name: {{ .Values.appName }}-claim
          persistentVolumeClaim:
            claimName: {{ .Values.global.mult.persistantVolumeClaimName }}
            readOnly: false
