apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}-deployment
  labels:
    app: {{ .Values.global.product }}
    tier: {{ .Values.appName }}
spec:
  selector:
    matchLabels:
      tier: {{ .Values.appName }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  replicas: {{ .Values.global.usercode.minReplicas | default 2 }} # tells deployment to run 2 pods matching the template
  template: # create pods using pod definition in this template
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/usercode-configmap.yaml") . | sha256sum }}
        prometheus.io/path: /metrics
        prometheus.io/port: "9100"
        prometheus.io/scrape: "true"
      labels:
        app: {{ .Values.global.product }}
        tier: {{ .Values.appName }}
    spec:
      {{ if .Values.global.usercode.affinity }}
      affinity:
        {{ .Values.global.usercode.affinity | toYaml | nindent 8 | trim }}
      {{- end}}
      terminationGracePeriodSeconds: 40
      initContainers:
        - name: init-wait
          image: docker-hub.middleware.biz/public/alpine
          command: ["sh", "-c", "until {{- if .Values.global.db.bouncer }} nc -zvw1 pgbouncer-service 5432 && {{- else }}  nc -zvw1 ${POSTGRES_DBHOST} ${POSTGRES_DBPORT} && {{- end }} {{- if .Values.global.mq.internal }} nc -zvw1 rabbit-service 5672 {{- else }} nc -zvw1  ${MQ_HOST} ${MQ_PORT}{{- end }}; do echo waiting for dependences; sleep 2; done;"]
          env:
            - name: MQ_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: host
            - name: MQ_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: port
            - name: POSTGRES_DBHOST
              {{- if .Values.global.db.bouncer }}
              value: "pgbouncer-service"
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: dbhost
            {{- end }}
            - name: POSTGRES_DBPORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: dbport
        - name: init-wait-rmq
          image: docker-hub.middleware.biz/public/alpine
          command: ['sh']
          args:
            - "-c"
            - |
              until wget -O - -q --header "Authorization: Basic `echo -n \"$MQ_USERNAME:$MQ_PASSWORD\" | base64`" http://{{- if .Values.global.mq.internal }}rabbit-service{{- else }}${MQ_HOST}{{- end }}:15672/api/exchanges/%2Fconveyor/ | grep -qF "conf_agent_direct"; do echo "waiting for exchanges to be ready..."; sleep 2; done
          env:
            - name: MQ_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: host
            - name: MQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: username
            - name: MQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: password
      shareProcessNamespace: true
      containers:
        - name: {{ .Values.appName }}
          image: "{{ .Values.image.registry }}/{{ .Values.global.repotype}}{{ .Values.image.repository }}:{{ .Values.global.usercode.tag }}"
          imagePullPolicy: {{ .Values.global.imagePullPolicy | default "IfNotPresent" }}
          env:
            - name: IPNODEDOMAIN
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            {{- if .Values.global.store_dumps.enabled }}
            - name: ERL_CRASH_DUMP
              value: "/var/dumps/$(POD_NAME)-erl.dump"
            {{- end }}
            - name: RELX_REPLACE_OS_VARS
              value: "true"
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.redis.secret.name }}
                  key: host
            - name: REDIS_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.redis.secret.name }}
                  key: port
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.redis.secret.name }}
                  key: password
            - name: MQ_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: host
            - name: MQ_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: port
            - name: MQ_VHOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: vhost
            - name: MQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: username
            - name: MQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: password
            - name: POSTGRES_DBHOST
              {{- if .Values.global.db.bouncer }}
              value: "pgbouncer-service"
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: dbhost
              {{- end }}
            - name: POSTGRES_DBUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: dbuser
            - name: POSTGRES_DBPWD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: dbpwd
            - name: POSTGRES_DBPORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: dbport
          ports:
          - containerPort: 9080
          lifecycle:
            preStop:
              exec:
                command: ["/ebsmnt/erlang/usercode/bin/cce","stop"]
          volumeMounts:
            - name: {{ .Values.appName }}-config
              mountPath: /ebsmnt/conf/usercode.config
              subPath: usercode.config
            - name: corezoid-license
              mountPath: /ebsmnt/certs
            {{- if .Values.global.store_dumps.enabled }}
            - name: dumps-volume
              mountPath: /var/dumps
            {{- end }}
          resources:
            {{ .Values.global.usercode.resources | toYaml | indent 12 | trim }}
          livenessProbe:
              httpGet:
                path: /is_ready
                port: 8383
              initialDelaySeconds: 30
              periodSeconds: 3
              timeoutSeconds: 5
              successThreshold: 1
              failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /is_ready
              port: 8383
            initialDelaySeconds: 30
            periodSeconds: 3
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
      {{- if not  (eq .Values.global.repotype "public") }}
      imagePullSecrets:
        - name: corezoid-secret
      {{- end }}
      volumes:
        - name: {{ .Values.appName }}-config
          configMap:
            name: {{ .Values.appName }}-config
        - name: corezoid-license
          secret:
            secretName: license-share-new
        {{- if .Values.global.store_dumps.enabled }}
        - name: dumps-volume
          hostPath:
            path: /var/dumps
        {{- end }}
