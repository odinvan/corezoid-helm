apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}-deployment
  labels:
    app: {{ .Values.global.product }}
    tier: {{ .Values.appName }}
spec:
  selector:
    matchLabels:
      tier: {{ .Values.appName }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  replicas: {{ .Values.global.capi.minReplicas }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/capi-configmap.yaml") . | sha256sum }}
        checksum/config_vm: {{ include (print $.Template.BasePath "/capi-configmap-vm.yaml") . | sha256sum }}
        prometheus.io/path: /metrics
        prometheus.io/port: "9100"
        prometheus.io/scrape: "true"
      labels:
        app: {{ .Values.global.product }}
        tier: {{ .Values.appName }}
    spec:
      {{ if .Values.global.capi.affinity }}
      affinity:
        {{ .Values.global.capi.affinity | toYaml | nindent 8 | trim }}
      {{- end}}

      terminationGracePeriodSeconds: 300

      initContainers:
        - name: init-wait

          image: "{{ .Values.global.imageRegistry }}/public/alpine"
          command: ["sh", "-c", "until {{- if .Values.global.db.bouncer }} nc -zvw1 pgbouncer-service 5432 && {{- else }}  nc -zvw1 ${POSTGRES_DBHOST} ${POSTGRES_DBPORT} && {{- end }}  nc -zvw1  ${MQ_HOST} ${MQ_PORT}; do echo waiting for deps; sleep 2; done;"]
          env:
            - name: MQ_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: host
            - name: MQ_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: port
            - name: POSTGRES_DBHOST
              {{- if .Values.global.db.bouncer }}
              value: "pgbouncer-service"
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: dbhost
            {{- end }}
            - name: POSTGRES_DBPORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secret.name }}
                  key: dbport
        - name: init-wait-rmq
          image: "{{ .Values.global.imageRegistry }}/public/alpine"
          command: ['sh']
          args:
            - "-c"
            - |
              until wget -O - -q --header "Authorization: Basic `echo -n \"$MQ_USERNAME:$MQ_PASSWORD\" | base64`" http://${MQ_HOST}:15672/api/exchanges/%2Fconveyor/ | grep -qF "conf_agent_direct"; do echo "waiting for exchanges to be ready..."; sleep 2; done
          env:
            - name: MQ_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: host
            - name: MQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: username
            - name: MQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secret.name }}
                  key: password
      shareProcessNamespace: true
      containers:
        - name: {{ .Values.appName }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy | default "IfNotPresent" }}
          image: "{{ .Values.global.imageRegistry }}/{{ .Values.global.repotype | default "public" }}{{ .Values.image.repository }}:{{ .Values.global.capi.tag }}"
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          {{- if .Values.global.store_dumps.enabled }}
          - name: ERL_CRASH_DUMP
            value: "/var/dumps/$(POD_NAME)-erl.dump"
          {{- end }}
          - name: NODE_COOKIE
            value: {{ .Values.appName }}-{{ .Release.Namespace }}
          - name: RELX_REPLACE_OS_VARS
            value: "true"
          - name: IPNODEDOMAIN
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SCHEDULERS
            value: "4"
          - name: capi_front_captcha_key
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.capi.secret.name }}
                key: capi_front_captcha_key
          - name: capi_backend_captcha_key
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.capi.secret.name }}
                key: capi_backend_captcha_key
          - name: REDIS_HOST
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.redis.secret.name }}
                key: host
          - name: REDIS_PORT
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.redis.secret.name }}
                key: port
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.redis.secret.name }}
                key: password
          - name: REDIS_HOST_CACHE
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.redis.secret.name }}
                key: host_cache
          - name: REDIS_PORT_CACHE
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.redis.secret.name }}
                key: port_cache
          - name: REDIS_PASSWORD_CACHE
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.redis.secret.name }}
                key: password_cache
          - name: MQ_HOST
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.mq.secret.name }}
                key: host
          - name: MQ_PORT
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.mq.secret.name }}
                key: port
          - name: MQ_VHOST
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.mq.secret.name }}
                key: vhost
          - name: MQ_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.mq.secret.name }}
                key: username
          - name: MQ_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.mq.secret.name }}
                key: password
          - name: MERCHANT_LOGIN
            valueFrom:
              secretKeyRef:
                name: merchant-secret
                key: merchant_login
          - name: MERCHANT_SECRET
            valueFrom:
              secretKeyRef:
                name: merchant-secret
                key: merchant_secret
          - name: ELASTICSEARCH_HOST
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.elasticsearch.secret.name }}
                key: host
          - name: ELASTICSEARCH_PORT
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.elasticsearch.secret.name }}
                key: port
          - name: POSTGRES_DBHOST
            {{- if .Values.global.db.bouncer }}
            value: "pgbouncer-service"
            {{- else }}
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.db.secret.name }}
                key: dbhost
            {{- end }}
          - name: POSTGRES_DBUSER
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.db.secret.name }}
                key: dbuser
          - name: POSTGRES_DBPWD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.db.secret.name }}
                key: dbpwd
          - name: POSTGRES_DBPORT
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.db.secret.name }}
                key: dbport
          ports:
          - containerPort: {{ .Values.containers.containerPort }}
          - containerPort: 8585
          lifecycle:
            preStop:
              exec:
                command: ["/ebsmnt/erlang/capi/bin/capi","stop"]
          volumeMounts:
            - name: {{ .Values.appName }}config
              mountPath: /ebsmnt/conf/capi.config
              subPath: capi.config
            - name: {{ .Values.appName }}-config-vm
              mountPath: /ebsmnt/erlang/capi/releases/1/vm.args
              subPath: vm.args
            - name: corezoid-license
              mountPath: /ebsmnt/certs
            {{- if .Values.global.store_dumps.enabled }}
            - name: dumps-volume
              mountPath: /var/dumps
            {{- end }}
          resources:
            {{ .Values.global.capi.resources | toYaml | indent 12 | trim }}
          livenessProbe:
            exec:
              command:
              - bash
              - -ec
              - |
                ulimit -n 1024
                exec /usr/bin/capi liveness
            initialDelaySeconds: 20
            periodSeconds: 20
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
              - bash
              - -ec
              - |
                ulimit -n 1024
                exec /usr/bin/capi readiness
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
              add: ["IPC_LOCK"]
      {{- if not  (eq .Values.global.repotype "public") }}
      imagePullSecrets:
        - name: corezoid-secret
      {{- end }}
      volumes:
        - name: {{ .Values.appName }}config
          configMap:
            name: {{ .Values.appName }}-config
        - name: {{ .Values.appName }}-config-vm
          configMap:
            name: {{ .Values.appName }}-config-vm
        - name: corezoid-license
          secret:
            secretName: license-share-new
        {{- if .Values.global.store_dumps.enabled }}
        - name: dumps-volume
          hostPath:
            path: /var/dumps
        {{- end }}
