apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}
  labels:
    app: {{ .Values.global.product }}
    tier: {{ .Values.appName }}
spec:
  selector:
    matchLabels:
      tier: {{ .Values.appName }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  replicas: {{ .Values.global.webadm.minReplicas }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/web-configmap-nginx.yaml") . | sha256sum }}
        checksum/config: {{ include (print $.Template.BasePath "/web-configmap-site.yaml") . | sha256sum }}
        prometheus.io/path: /metrics
        prometheus.io/port: "9113"
        prometheus.io/scrape: "true"
      labels:
        app: {{ .Values.global.product }}
        tier: {{ .Values.appName }}
    spec:
      containers:
        - name: {{ .Values.appName }}
          image: "{{ .Values.global.imageRegistry }}/{{ .Values.global.repotype | default "public" }}{{ .Values.image.repository }}:{{ .Values.global.webadm.tag }}"
          ports:
          - containerPort: 80
          volumeMounts:
            - name: web-config-nginx
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: web-config-site
              mountPath: /etc/nginx/conf.d/corezoid.conf
              subPath: corezoid.conf
            - name: web-config-logo
              mountPath: /usr/share/nginx/html/logo/logo.svg
              subPath: logo.svg
            - name: web-config-logo
              mountPath: /usr/share/nginx/html/logo/logo_auth.svg
              subPath: logo_auth.svg
          resources:
            {{ .Values.global.webadm.resources | toYaml | indent 12 | trim }}
          readinessProbe:
            httpGet:
              path: /nginx_status
              port: 80
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /nginx_status
              port: 80
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          imagePullPolicy: {{ .Values.global.imagePullPolicy | default "IfNotPresent" }}
          lifecycle:
            preStop:
              exec:
                command: [
                  # Gracefully shutdown nginx
                  "/usr/sbin/nginx", "-s", "quit"
                ]
        - name: nginx-exporter
          image: "{{ .Values.global.imageRegistry }}/nginx/nginx-prometheus-exporter"
          resources:
            requests:
              cpu: 10m
              memory: 30Mi
          ports:
            - name: nginx-exp-port
              containerPort: 9113
          args:
            - -nginx.scrape-uri=http://localhost/nginx_status
      {{- if not  (eq .Values.global.repotype "public") }}
      imagePullSecrets:
        - name: corezoid-secret
      {{- end }}
      {{- if (.Values.global.tolerations) }}
      tolerations:
{{ toYaml .Values.global.tolerations | indent 8 }}
      {{- end }}
      volumes:
        - name: web-config-nginx
          configMap:
            name: {{ .Values.appName }}-main
        - name: web-config-site
          configMap:
            name: {{ .Values.appName }}-site
        - name: web-config-logo
          configMap:
            name: {{ .Values.appName }}-config-logo
